<?php

declare(strict_types=1);

namespace Test\PhpBitcrypt;

use GuzzleHttp\Client;
use Shopex\PhpBitcrypt\Rsa;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;

/**
 * Class RsaTest
 * @package Test\PhpBitcrypt
 * @internal
 * @covers \Shopex\PhpBitcrypt\Rsa
 */
class RsaTest extends TestCase
{
    /**
     * @var Rsa
     */
    private $rsa;

    /**
     * @var string
     */
    private $testData = "测试加密服务ab13@&*";

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $logger = new Logger("stdout");
        $logger->pushHandler(new StdoutHandler());
        $this->rsa = new Rsa(function() {
            return new Client([
                "base_uri" => "http://127.0.0.1:9989"
            ]);
        }, $logger);
    }

    public function testRsaEncrypt() {
        $response = $this->rsa->encrypt("eb596a4b02badea4b80c7087961241ec", $this->testData);
        $this->encryptData = $response->json("data", "");
        $this->assertSame(200, $response->getStatusCode());
    }

    public function testRsaDecrypt() {
        $encryptData = $this->rsa->encrypt("eb596a4b02badea4b80c7087961241ec", $this->testData)->json("data");
        $response = $this->rsa->decrypt("eb596a4b02badea4b80c7087961241ec", $encryptData);
        $this->assertSame(200, $response->getStatusCode());
        $this->assertSame($this->testData, $response->json("data", ""));
    }
}